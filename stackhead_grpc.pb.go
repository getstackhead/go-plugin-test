// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pluginlib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StackHeadServiceClient is the client API for StackHeadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackHeadServiceClient interface {
	Execute(ctx context.Context, in *StackHeadServiceRequest, opts ...grpc.CallOption) (*StackHeadServiceReply, error)
	InstallPackage(ctx context.Context, in *StackHeadPackageInformation, opts ...grpc.CallOption) (*StackHeadServiceReply, error)
	UninstallPackage(ctx context.Context, in *StackHeadPackageInformation, opts ...grpc.CallOption) (*StackHeadServiceReply, error)
}

type stackHeadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStackHeadServiceClient(cc grpc.ClientConnInterface) StackHeadServiceClient {
	return &stackHeadServiceClient{cc}
}

func (c *stackHeadServiceClient) Execute(ctx context.Context, in *StackHeadServiceRequest, opts ...grpc.CallOption) (*StackHeadServiceReply, error) {
	out := new(StackHeadServiceReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackHeadServiceClient) InstallPackage(ctx context.Context, in *StackHeadPackageInformation, opts ...grpc.CallOption) (*StackHeadServiceReply, error) {
	out := new(StackHeadServiceReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadService/InstallPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackHeadServiceClient) UninstallPackage(ctx context.Context, in *StackHeadPackageInformation, opts ...grpc.CallOption) (*StackHeadServiceReply, error) {
	out := new(StackHeadServiceReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadService/UninstallPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackHeadServiceServer is the server API for StackHeadService service.
// All implementations must embed UnimplementedStackHeadServiceServer
// for forward compatibility
type StackHeadServiceServer interface {
	Execute(context.Context, *StackHeadServiceRequest) (*StackHeadServiceReply, error)
	InstallPackage(context.Context, *StackHeadPackageInformation) (*StackHeadServiceReply, error)
	UninstallPackage(context.Context, *StackHeadPackageInformation) (*StackHeadServiceReply, error)
	mustEmbedUnimplementedStackHeadServiceServer()
}

// UnimplementedStackHeadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStackHeadServiceServer struct {
}

func (UnimplementedStackHeadServiceServer) Execute(context.Context, *StackHeadServiceRequest) (*StackHeadServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedStackHeadServiceServer) InstallPackage(context.Context, *StackHeadPackageInformation) (*StackHeadServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPackage not implemented")
}
func (UnimplementedStackHeadServiceServer) UninstallPackage(context.Context, *StackHeadPackageInformation) (*StackHeadServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallPackage not implemented")
}
func (UnimplementedStackHeadServiceServer) mustEmbedUnimplementedStackHeadServiceServer() {}

// UnsafeStackHeadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackHeadServiceServer will
// result in compilation errors.
type UnsafeStackHeadServiceServer interface {
	mustEmbedUnimplementedStackHeadServiceServer()
}

func RegisterStackHeadServiceServer(s grpc.ServiceRegistrar, srv StackHeadServiceServer) {
	s.RegisterService(&StackHeadService_ServiceDesc, srv)
}

func _StackHeadService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackHeadServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadServiceServer).Execute(ctx, req.(*StackHeadServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackHeadService_InstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackHeadPackageInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadServiceServer).InstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadService/InstallPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadServiceServer).InstallPackage(ctx, req.(*StackHeadPackageInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackHeadService_UninstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackHeadPackageInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadServiceServer).UninstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadService/UninstallPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadServiceServer).UninstallPackage(ctx, req.(*StackHeadPackageInformation))
	}
	return interceptor(ctx, in, info, handler)
}

// StackHeadService_ServiceDesc is the grpc.ServiceDesc for StackHeadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackHeadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginlib.StackHeadService",
	HandlerType: (*StackHeadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _StackHeadService_Execute_Handler,
		},
		{
			MethodName: "InstallPackage",
			Handler:    _StackHeadService_InstallPackage_Handler,
		},
		{
			MethodName: "UninstallPackage",
			Handler:    _StackHeadService_UninstallPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stackhead.proto",
}

// StackHeadPluginClient is the client API for StackHeadPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackHeadPluginClient interface {
	GetConfig(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*StackHeadPluginConfig, error)
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error)
	TriggerHook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error)
}

type stackHeadPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewStackHeadPluginClient(cc grpc.ClientConnInterface) StackHeadPluginClient {
	return &stackHeadPluginClient{cc}
}

func (c *stackHeadPluginClient) GetConfig(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*StackHeadPluginConfig, error) {
	out := new(StackHeadPluginConfig)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadPlugin/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackHeadPluginClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error) {
	out := new(StackHeadPluginReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadPlugin/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackHeadPluginClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error) {
	out := new(StackHeadPluginReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadPlugin/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackHeadPluginClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error) {
	out := new(StackHeadPluginReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadPlugin/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackHeadPluginClient) TriggerHook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (*StackHeadPluginReply, error) {
	out := new(StackHeadPluginReply)
	err := c.cc.Invoke(ctx, "/pluginlib.StackHeadPlugin/TriggerHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackHeadPluginServer is the server API for StackHeadPlugin service.
// All implementations must embed UnimplementedStackHeadPluginServer
// for forward compatibility
type StackHeadPluginServer interface {
	GetConfig(context.Context, *NullRequest) (*StackHeadPluginConfig, error)
	Setup(context.Context, *SetupRequest) (*StackHeadPluginReply, error)
	Deploy(context.Context, *DeployRequest) (*StackHeadPluginReply, error)
	Destroy(context.Context, *DestroyRequest) (*StackHeadPluginReply, error)
	TriggerHook(context.Context, *HookRequest) (*StackHeadPluginReply, error)
	mustEmbedUnimplementedStackHeadPluginServer()
}

// UnimplementedStackHeadPluginServer must be embedded to have forward compatible implementations.
type UnimplementedStackHeadPluginServer struct {
}

func (UnimplementedStackHeadPluginServer) GetConfig(context.Context, *NullRequest) (*StackHeadPluginConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedStackHeadPluginServer) Setup(context.Context, *SetupRequest) (*StackHeadPluginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedStackHeadPluginServer) Deploy(context.Context, *DeployRequest) (*StackHeadPluginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedStackHeadPluginServer) Destroy(context.Context, *DestroyRequest) (*StackHeadPluginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedStackHeadPluginServer) TriggerHook(context.Context, *HookRequest) (*StackHeadPluginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerHook not implemented")
}
func (UnimplementedStackHeadPluginServer) mustEmbedUnimplementedStackHeadPluginServer() {}

// UnsafeStackHeadPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackHeadPluginServer will
// result in compilation errors.
type UnsafeStackHeadPluginServer interface {
	mustEmbedUnimplementedStackHeadPluginServer()
}

func RegisterStackHeadPluginServer(s grpc.ServiceRegistrar, srv StackHeadPluginServer) {
	s.RegisterService(&StackHeadPlugin_ServiceDesc, srv)
}

func _StackHeadPlugin_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadPluginServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadPlugin/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadPluginServer).GetConfig(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackHeadPlugin_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadPluginServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadPlugin/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadPluginServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackHeadPlugin_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadPluginServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadPlugin/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadPluginServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackHeadPlugin_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadPluginServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadPlugin/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadPluginServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackHeadPlugin_TriggerHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackHeadPluginServer).TriggerHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginlib.StackHeadPlugin/TriggerHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackHeadPluginServer).TriggerHook(ctx, req.(*HookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StackHeadPlugin_ServiceDesc is the grpc.ServiceDesc for StackHeadPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackHeadPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginlib.StackHeadPlugin",
	HandlerType: (*StackHeadPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _StackHeadPlugin_GetConfig_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _StackHeadPlugin_Setup_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _StackHeadPlugin_Deploy_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _StackHeadPlugin_Destroy_Handler,
		},
		{
			MethodName: "TriggerHook",
			Handler:    _StackHeadPlugin_TriggerHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stackhead.proto",
}
